@using Admin.Models
@model BookingViewModel
@{
    //required in order to render validation attributes
    ViewContext.FormContext = new FormContext();
}

@functions{
    public Dictionary<string, object> generateDatePickerAttributes(
           string elementId,
           string fieldName,
           string dataBindAttribute,
           Dictionary<string, object> additionalAttributes = null)
    {

        Dictionary<string, object> datePickerAttributes = additionalAttributes != null ? new Dictionary<string, object>(additionalAttributes) : new Dictionary<string, object>();

        datePickerAttributes["id"] = elementId;
        datePickerAttributes["name"] = fieldName;
        datePickerAttributes["data-bind"] = dataBindAttribute;
        datePickerAttributes["required"] = "required";
        datePickerAttributes["style"] = "z-index: inherit;";

        return datePickerAttributes;
    }
}

@*<div class="k-edit-label">
    @(Html.LabelFor(model => model.Title))
</div>
<div data-container-for="title" class="k-edit-field">
    @(Html.TextBoxFor(model => model.Title, new { @class = "k-textbox", data_bind = "value:title" }))
</div>*@

<div class="k-edit-label">
    @(Html.LabelFor(model => model.UserId))
</div>

@if (Model.BookingId == 0)
{
<div data-container-for="UserId" class="k-edit-field">

    @*@(Html.Kendo().ComboBoxFor(model => model.UserId)
                .HtmlAttributes(new { data_bind = "value:UserId", style = "width: 300px" })
                .DataTextField("Name")
                .DataValueField("Id")
                .Filter(FilterType.Contains)
                .AutoBind(false)
                .MinLength(3)
                //.Template("<span class='k-scheduler-mark' style='background-color:\\#= data.Color?Color:'' \\#'></span>\\#=Name\\#")
                .DataSource(source => source.Read(r => r.Action("GetUserNamesForSchedule", "Account")).ServerFiltering(true)).ToClientTemplate()
    )*@
    @(Html.Kendo().DropDownListFor(m => m.UserId)


          .DataTextField("Name")
          .DataValueField("Id")
          .HtmlAttributes(new { data_bind = "value:UserId", style = "width:100%" })
          .Filter("contains")
          .DataSource(source =>
          {
              source.Read(read =>
              {
                  read.Action("GetUserNamesForSchedule", "Account");
              })
              .ServerFiltering(true);
          }))

</div>
}
else
{
 @Html.HiddenFor(m=> m.UserId)
}

<div class="k-edit-label">
    @(Html.LabelFor(model => model.Start))
</div>
<div data-container-for="start" class="k-edit-field">

    @(Html.Kendo().DateTimePickerFor(model => model.Start)
        .HtmlAttributes(generateDatePickerAttributes("startDateTime", "start", "value:start,invisible:isAllDay"))
        .Enable(false))

    @(Html.Kendo().DatePickerFor(model => model.Start)
        .HtmlAttributes(generateDatePickerAttributes("startDate", "start", "value:start,visible:isAllDay"))
        .Enable(false))


    <span data-bind="text: startTimezone"></span>
    <span data-for="start" class="k-invalid-msg"></span>
</div>

<div class="k-edit-label">
    @(Html.LabelFor(model => model.End))
</div>
<div data-container-for="end" class="k-edit-field">

    @(Html.Kendo().DateTimePickerFor(model => model.End)
        .HtmlAttributes(generateDatePickerAttributes(
            "endDateTime",
            "end",
            "value:end,invisible:isAllDay",
            new Dictionary<string, object>() { { "data-dateCompare-msg", "End date should be greater than or equal to the start date" } }))
            .Enable(false))

    @(Html.Kendo().DatePickerFor(model => model.End)
        .HtmlAttributes(generateDatePickerAttributes(
            "endDate",
            "end",
            "value:end,visible:isAllDay",
            new Dictionary<string, object>() { { "data-dateCompare-msg", "End date should be greater than or equal to the start date" } }))
            .Enable(false))

    <span data-bind="text: endTimezone"></span>
    <span data-for="end" class="k-invalid-msg"></span>
</div>
 

<div class="k-edit-label">
    @(Html.LabelFor(model => model.CustomPrice))
</div>
<div data-container-for="CustomPrice" class="k-edit-field">
    @(Html.TextBoxFor(model => model.CustomPrice, new { @class = "k-textbox", data_bind = "value:CustomPrice" }))
</div>
 
<div class="k-edit-label">
    @(Html.LabelFor(model => model.Idcancha))
</div>
<div data-container-for="Idcancha" class="k-edit-field">
    @*@(Html.Kendo().ComboBoxFor(model => model.Idcancha)
            .HtmlAttributes(new { data_bind = "value:Idcancha", style = "width: 300px" })
            .DataTextField("Name")
            .DataValueField("Id")
            .Placeholder("Seleccione Cancha")
            //.OptionLabel("Cancha")
            .ValuePrimitive(true)
            .Text("Seleccione Cancha").Value("")
            //.Template("<span class='k-scheduler-mark' style='background-color:\\#= data.Color?Color:'' \\#'></span>\\#=Name\\#")
            .DataSource(source=> source.Read(r=>r.Action("GetFieldsForAutoComplete", "Canchas"))).ToClientTemplate()
        )*@

    @(Html.Kendo().DropDownListFor(m=>m.Idcancha)

          .DataTextField("Name")
          .DataValueField("Id")
          .HtmlAttributes(new { style = "width:100%" })
          .Filter("contains")
          .DataSource(source =>
          {
              source.Read(read =>
              {
                  read.Action("GetFieldsForAutoComplete", "Canchas");
              })
              .ServerFiltering(true);
          }))
</div>

<div class="k-edit-label">
    @*@(Html.LabelFor(model => model.Attendees))*@
</div>
<div data-container-for="Attendees" class="k-edit-field">
    @*@(Html.Kendo().AutoCompleteFor (model => model.Attendees)
            .HtmlAttributes(new { data_bind = "value:Attendees" })
            .Animation(true)
            .DataTextField("text")
            .Value("id")
            .ValuePrimitive(true)
            //.TagTemplate("<span class='k-scheduler-mark' style='background-color:\\#= data.Color?Color:'' \\#'></span>\\#=Text\\#")
            //.ItemTemplate("<span class='k-scheduler-mark' style='background-color:\\#= data.Color?Color:'' \\#'></span>\\#=Text\\#")
            .DataSource(ds => ds.Read("Customers", "Customers"))
        )*@
</div>
<div class="k-edit-label">
    @(Html.LabelFor(model => model.Description))
</div>
<div data-container-for="description" class="k-edit-field">
    @(Html.TextAreaFor(model => model.Description, new { @class = "k-textbox", data_bind = "value:description" }))
</div>

@{
    ViewContext.FormContext = null;
}
@*<script src="~/Scripts/typeahead.bundle.min.js"></script>
<script src="~/Scripts/typeahead.jquery.min.js"></script>
<script src="~/Scripts/typeahead.mvc.model.js"></script>*@